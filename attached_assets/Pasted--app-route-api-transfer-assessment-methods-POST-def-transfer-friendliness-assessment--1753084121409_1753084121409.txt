@app.route('/api/transfer-assessment', methods=['POST'])
def transfer_friendliness_assessment():
    try:
        data = request.get_json()
        primary_college = data.get('primary_college')
        competitor_colleges = data.get('competitor_colleges', [])
        
        if not primary_college:
            return jsonify({'error': 'Primary college name is required'}), 400
        
        if len(competitor_colleges) < 1:
            return jsonify({'error': 'At least 1 competitor college is required'}), 400

        # Get all college names for data fetching
        all_colleges = [primary_college] + competitor_colleges
        
        # Fetch basic data for all schools
        schools_data = []
        for school_name in all_colleges:
            api_url = f'https://api.data.gov/ed/collegescorecard/v1/schools?api_key={COLLEGECARD_API_KEY}&school.name={school_name}&fields=school.name,school.city,school.state,school.school_url,school.ownership,2022.student.size,2022.cost.tuition.in_state,2022.cost.tuition.out_of_state&_per_page=1'

            response = requests.get(api_url)
            response.raise_for_status()

            api_data = response.json()
            results = api_data.get('results', [])

            if results:
                school_info = results[0]
                schools_data.append({
                    'name': school_info.get('school.name', 'N/A'),
                    'city': school_info.get('school.city', 'N/A'),
                    'state': school_info.get('school.state', 'N/A'),
                    'website': school_info.get('school.school_url', 'N/A'),
                    'ownership': get_ownership_type(school_info.get('school.ownership')),
                    'student_size': school_info.get('2022.student.size'),
                    'in_state_tuition': school_info.get('2022.cost.tuition.in_state'),
                    'out_of_state_tuition': school_info.get('2022.cost.tuition.out_of_state')
                })

        if not schools_data:
            return jsonify({'error': 'No school data found'}), 404

        # Build comprehensive TFA prompt
        primary_school_info = schools_data[0]
        competitor_schools_info = schools_data[1:]

        schools_summary = f"""PRIMARY COLLEGE: {primary_school_info['name']}
Location: {primary_school_info['city']}, {primary_school_info['state']}
Website: {primary_school_info['website']}
Type: {primary_school_info['ownership']}
Student Size: {primary_school_info['student_size'] if primary_school_info['student_size'] else 'N/A'}
In-State Tuition: {f"${primary_school_info['in_state_tuition']:,}" if primary_school_info['in_state_tuition'] else 'N/A'}
Out-of-State Tuition: {f"${primary_school_info['out_of_state_tuition']:,}" if primary_school_info['out_of_state_tuition'] else 'N/A'}

COMPETITOR COLLEGES:
"""

        for i, school in enumerate(competitor_schools_info, 1):
            schools_summary += f"""
Competitor #{i}: {school['name']}
Location: {school['city']}, {school['state']}
Website: {school['website']}
Type: {school['ownership']}
Student Size: {school['student_size'] if school['student_size'] else 'N/A'}
In-State Tuition: {f"${school['in_state_tuition']:,}" if school['in_state_tuition'] else 'N/A'}
Out-of-State Tuition: {f"${school['out_of_state_tuition']:,}" if school['out_of_state_tuition'] else 'N/A'}
"""

        prompt = f"""You are Jay Fedje, MA Vice President of Partnerships at DegreeSight, conducting a Transfer Friendliness Assessment (TFA). You are a seasoned leader of enrollment management with 35 years in higher education.

Conduct a comprehensive Transfer Friendliness Assessment for the following colleges:

{schools_summary}

TRANSFER FRIENDLINESS LEVELS:
Level 1 – Transfer-Resistant: Minimal support, unclear pathways, limited acknowledgment of transfer student needs
Level 2 – Transfer-Curious: Some signs of transfer interest, but inconsistent or underdeveloped policies
Level 3 – Transfer-Conscious: Recognizes and responds to transfer needs with decent resources and some outreach
Level 4 – Transfer-Ready: Actively supports transfer students with pathways, tools, and dedicated staff
Level 5 – Transfer-First: Transfer students are treated as core audience with seamless support and strategic priority

For EACH college, evaluate the 3 BIG QUESTIONS:

BIG QUESTION 1: Are transfer students a priority at [College Name]?
Evaluate based on:
- Transfer testimonials and success stories
- Established transfer community
- Specific transfer web page
- Dedicated staff contact information
- Welcoming messages to prospective transfers
- Quick access to transfer-focused pages from homepage

Provide minimum 5 bullet responses and assign a rating (Yes/Somewhat/No).

BIG QUESTION 2: How will students' credits transfer from previous college to [College Name]?
Evaluate based on:
- Real-time, on-demand credit evaluations before application
- Established articulation agreements and pathways
- Mobile-capable credit evaluation process
- Whether evaluation requires application/admission first

Provide minimum 5 bullet responses and assign a rating (Yes/Yes, but/No).

BIG QUESTION 3: Does [College Name] articulate affordability and/or ability to pay for education?
Evaluate based on:
- Affordability and access messages to transfer students
- Transfer student success stories/testimonials
- Transfer-specific financial aid and scholarships

Provide minimum 5 bullet responses and assign a rating (Yes/Minimal/No).

Then provide:

SUMMARY TABLE:
Show ratings for all colleges across the 3 questions.

OVERALL TRANSFER FRIENDLINESS LEVELS (1-5):
Assign each college a level with justification.

ACTION ITEMS FOR PRIMARY COLLEGE ({primary_school_info['name']}):
HIGH PRIORITY: Minimum 2 recommendations
MEDIUM PRIORITY: Minimum 4 recommendations  
LOW PRIORITY: Minimum 5 recommendations
COMPETITIVE ADVANTAGES TO MAINTAIN: Minimum 6 observed advantages

Structure your response as a professional TFA report."""

        # Generate TFA report using Claude AI
        report_text = ""
        for event in replicate.stream(
            "anthropic/claude-4-sonnet",
            input={
                "prompt": prompt,
                "max_tokens": 12000,
                "system_prompt": "You are Jay Fedje, an expert transfer enrollment professional with 35 years in higher education. You conduct Transfer Friendliness Assessments through the eyes of prospective transfer students. Provide detailed, professional analysis following the exact TFA methodology and format.",
                "extended_thinking": False,
                "max_image_resolution": 0.5,
                "thinking_budget_tokens": 2048
            },
        ):
            report_text += str(event)

        return jsonify({
            'primary_college': primary_school_info,
            'competitor_colleges': competitor_schools_info,
            'tfa_report': report_text
        })

    except requests.RequestException as e:
        return jsonify({'error': f'API request failed: {str(e)}'}), 500
    except Exception as e:
        return jsonify({'error': f'An error occurred: {str(e)}'}), 500

def get_ownership_type(ownership_code):
    ownership_types = {
        1: 'Public',
        2: 'Private nonprofit',
        3: 'Private for-profit'
    }
    return ownership_types.get(ownership_code, 'Unknown')