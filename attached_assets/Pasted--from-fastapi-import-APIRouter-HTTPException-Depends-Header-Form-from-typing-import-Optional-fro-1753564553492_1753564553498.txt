
from fastapi import APIRouter, HTTPException, Depends, Header, Form
from typing import Optional
from pydantic import BaseModel
import firebase_admin
from firebase_admin import credentials, auth, firestore
import os

# Initialize Firebase Admin (only once)
if not firebase_admin._apps:
    try:
        # Use the service account key file
        cred = credentials.Certificate("serviceAccountKey.json")
        firebase_admin.initialize_app(cred)
        print("Firebase Admin initialized successfully")
    except Exception as e:
        print(f"Warning: Firebase Admin not initialized - {e}")
        print("Using mock authentication for development")

# Initialize Firestore client
db = firestore.client()

router = APIRouter(prefix="/api/admin", tags=["admin"])

# Pydantic models for JSON requests
class AdminRequest(BaseModel):
    email: str

# Firebase Firestore functions for admin management
async def get_admin_emails():
    """Get all admin emails from Firestore"""
    try:
        admins_ref = db.collection('admins')
        docs = admins_ref.stream()
        return [doc.id for doc in docs]
    except Exception as e:
        print(f"Error getting admins from Firestore: {e}")
        # Fallback to default admins if Firestore fails
        return ["admin@example.com", "nealconwayp@gmail.com"]

async def add_admin_to_firestore(email: str, added_by: str):
    """Add admin email to Firestore"""
    try:
        admin_data = {
            "email": email,
            "addedAt": firestore.SERVER_TIMESTAMP,
            "addedBy": added_by
        }
        db.collection('admins').document(email).set(admin_data)
        return True
    except Exception as e:
        print(f"Error adding admin to Firestore: {e}")
        return False

async def remove_admin_from_firestore(email: str):
    """Remove admin email from Firestore"""
    try:
        db.collection('admins').document(email).delete()
        return True
    except Exception as e:
        print(f"Error removing admin from Firestore: {e}")
        return False

async def get_admin_details():
    """Get detailed admin information from Firestore"""
    try:
        admins_ref = db.collection('admins')
        docs = admins_ref.stream()
        admins = []
        for doc in docs:
            admin_data = doc.to_dict()
            admin_data['email'] = doc.id
            admins.append(admin_data)
        return admins
    except Exception as e:
        print(f"Error getting admin details from Firestore: {e}")
        return []

async def verify_firebase_token(authorization: Optional[str] = Header(None)):
    """Verify Firebase ID token and return user email"""
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header required")
    
    try:
        # Extract token from "Bearer <token>"
        if not authorization.startswith("Bearer "):
            raise HTTPException(status_code=401, detail="Invalid authorization format")
        
        token = authorization.split(" ")[1]
        
        # Verify the token with Firebase Admin
        decoded_token = auth.verify_id_token(token)
        user_email = decoded_token.get('email')
        
        if not user_email:
            raise HTTPException(status_code=401, detail="Email not found in token")
            
        return user_email
    
    except Exception as e:
        print(f"Firebase auth error: {e}")
        raise HTTPException(status_code=401, detail="Invalid or expired token")

@router.get("/check")
async def check_admin(current_user_email: str = Depends(verify_firebase_token)):
    """Check if current user is an admin"""
    admin_emails = await get_admin_emails()
    is_admin = current_user_email in admin_emails
    return {"isAdmin": is_admin, "email": current_user_email}

@router.post("/add")
async def add_admin(
    request: AdminRequest = None,
    email: str = Form(None),
    current_user_email: str = Depends(verify_firebase_token)
):
    """Add a new admin (admin only)"""
    admin_emails = await get_admin_emails()
    if current_user_email not in admin_emails:
        raise HTTPException(status_code=403, detail="Not authorized")

    # Accept either JSON or form data
    admin_email = request.email if request else email
    
    if not admin_email:
        raise HTTPException(status_code=400, detail="Email is required")

    if admin_email not in admin_emails:
        success = await add_admin_to_firestore(admin_email, current_user_email)
        if not success:
            raise HTTPException(status_code=500, detail="Failed to add admin to database")

    return {"message": "Admin added successfully", "email": admin_email}

@router.post("/remove")
async def remove_admin(
    request: AdminRequest = None,
    email: str = Form(None),
    current_user_email: str = Depends(verify_firebase_token)
):
    """Remove an admin (admin only)"""
    admin_emails = await get_admin_emails()
    if current_user_email not in admin_emails:
        raise HTTPException(status_code=403, detail="Not authorized")

    # Accept either JSON or form data
    admin_email = request.email if request else email
    
    if not admin_email:
        raise HTTPException(status_code=400, detail="Email is required")

    if admin_email in admin_emails:
        success = await remove_admin_from_firestore(admin_email)
        if not success:
            raise HTTPException(status_code=500, detail="Failed to remove admin from database")

    return {"message": "Admin removed successfully", "email": admin_email}

@router.get("/list")
async def list_admins(current_user_email: str = Depends(verify_firebase_token)):
    """List all admins (admin only)"""
    admin_emails = await get_admin_emails()
    if current_user_email not in admin_emails:
        raise HTTPException(status_code=403, detail="Not authorized")

    admins = await get_admin_details()
    
    # Convert Firestore timestamps to ISO format
    for admin in admins:
        if 'addedAt' in admin and admin['addedAt']:
            admin['addedAt'] = admin['addedAt'].isoformat()

    return {"admins": admins}
